For merging, we really just need to start with the first list of nodes,
and then go through the second list of nodes and try to find corresponding
nodes in the result.  If we don't find a corresponding node, then we
add a new one.  We just need to return the merged list and the map from
nodes in the second list to the merged list.  There's no need for a map
for the first list since it will match exactly.


// When the new node already exists, we don't need to change the
// merged nodes.
template <typename... MergedNodes, size_t new_index, typename NewExpr>
auto updateMergedNodes(List<MergedNodes...>,Indexed<new_index>,NewExpr)
{
  using NewMergeDNodes = List<MergedNodes...>;
  return Merge3Result<NewMergedNodes,new_index>{};
}


// When the new node doesn't exist, we need to add a node.
template <typename... MergedNodes, typename NewExpr>
auto updateMergedNodes(List<MergedNodes...>,void,NewExpr) =
{
  constexpr auto new_index = sizeof...(MergedNodes);
  using NewMergedNodes = List<MergedNodes... , Node<new_index,NewExpr>>;
  return Merge3Result<NewMergedNodes,new_index>{};
}


// When we don't have any more nodes to add, return what we've created.
merge2(merged_nodes,List<>,List<MapBEntries...>)
{
  return (merged_nodes,map_b);
}


auto mapExpr(Var<A>,List<MapBEntries...>)
{
  return Var<A>{};
}


// If we have nodes to add, add the first one and recurse.
template <typename MergedNodes,typename MapBEntries...>
auto merge2(MergedNodes,List<Node<indexb,ExprB>,BNodes...>,List<MapBEntries...>)
{
  using MappedExpr = decltype(mapExpr(ExprB,MapBEntries{}));
  using MaybeMergedIndex = decltype(findIndex(MappedExpr{},MergedNodes{}));

  using UpdateResult =
    decltype(updateMergedNodes(MergedNodes{},maybe_merged_index,mapped_expr));

  using NewMergedNodes = typename UpdateResult::NewMergedNodes;
  constexpr auto new_index = UpdateResult::new_index;

  using NewMapB = List<MapBEntries...,MapEntry<index_b,new_index>>;
  return merge2(NewMergedNodes{},List<BNodes...>{},NewMapB{});
}


// Build the merged nodes by starting with the first list of nodes and
// adding the second list.
auto merge(List<NodesA...>,List<NodesB...>)
{
  using MergedNodes = List<NodesA...>;
  using MapEntries = List<>;
  return merge2(MergedNodes{},List<NodesB...>{},MapEntries{});
}
